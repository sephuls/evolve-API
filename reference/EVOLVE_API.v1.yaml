openapi: 3.0.0
info:
  title: Evolve API
  version: '1.0'
  description: |-
    Evolve API docs. Voulez-vous evolve avec moi ce soir?


    ### API connectie
    Voor connectie met de API loop de volgende stappen door:

    ```
    $ git checkout develop
    $ git pull develop
    $ source environment.bash
    $ pse_env
    $ > cd issue_tracker
    ```

    > (Optioneel) update database:
    > ```
    > $ > python3 manage.py migrate.py
    > ```

    > (Optioneel) reÃ¯nitialiseer database:
    > ```
    > $ > python3 manage.py makemigrations.py
    > $ > python3 manage.py migrate.py
    > ```

    ### Start webserver:
    ```
    $ > python3 manage.py runserver
    ```

    Connect met api-endpoints: `localhost:8000/api/endpoint`

    Open admin-(db)pagina: `localhost:8000/admin` en log in met: `superuser@test.nl` en`test`.

    <!-- theme: info -->

    > Als er geen superuser aangemaakt is kun je dat zelf doen:
    > ```
    > $ > python3 manage.py createsuperuser
    > ```
  contact: {}
servers:
  - url: 'http://localhost:8000/api'
paths:
  /user/new/:
    parameters: []
    post:
      summary: Create a new user
      operationId: post-user-new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    description: error code is altijd 0 op succes
                    example: 0
                    default: 0
                  response:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: c7a19cf986eeb6b447719aadbc58f98b061c28b3
                      user_id:
                        type: integer
                        example: 5
              examples:
                Voorbeeld:
                  value:
                    error: 0
                    response:
                      access_token: c7a19cf986eeb6b447719aadbc58f98b061c28b3
                      user_id: 5
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    minimum: 1
                    exclusiveMinimum: true
                    example: 5
              examples:
                Voorbeeld:
                  value:
                    error: 5
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    minimum: 1
                    exclusiveMinimum: true
                    example: 1
              examples:
                Voorbeeld:
                  value:
                    error: 1
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    minimum: 1
                    exclusiveMinimum: true
                    example: 1
              examples:
                Voorbeeld:
                  value:
                    error: 1
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    description: Is always 1 on status=500
                    minimum: 1
                    exclusiveMinimum: true
                    default: 0
                    example: 1
              examples:
                Voorbeeld:
                  value:
                    error: 1
      description: Maak een nieuwe user aan. Returnt een `access_token` en een `user_id`.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 254
                  example: 12345678@student.uva.nl
                  description: e-mail veld
                password:
                  type: string
                  example: mijnpasswordinplaintext
                  maxLength: 254
                  minLength: 9
                  description: plaintext wachtwoord
                first_name:
                  type: string
                  example: Isabel
                  description: voornaam
                last_name:
                  type: string
                  example: de Jong
                  description: achternaam
                uva_id:
                  type: integer
                  description: uva id
                  example: 12345678
              required:
                - email
                - password
                - first_name
                - last_name
                - uva_id
            examples:
              Voorbeeld:
                value:
                  email: 12345678@student.uva.nl
                  password: mijnpasswordinplaintext
                  first_name: Isabel
                  last_name: de Jong
                  uva_id: 12345678
        description: 'POST data:'
      tags:
        - User
        - Course
  /course/create:
    post:
      summary: Create aa a a a
      operationId: post-course-create
      responses:
        '200':
          description: OK
      description: Create a new course
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                course_id:
                  type: string
                course_name:
                  type: string
              required:
                - user_id
                - course_id
                - course_name
            examples: {}
        description: 'Only users with authorization level > 1 can create a new course.'
      tags:
        - Course
  /course/remove:
    post:
      summary: Remove a course
      operationId: post-course-remove
      responses:
        '200':
          description: OK
      tags:
        - Course
      description: Remove an existing course.
      parameters:
        - schema:
            type: string
          in: query
          name: access_token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                course_id:
                  type: string
              required:
                - user_id
                - course_id
  /course/issues:
    get:
      summary: Retrieve all issues linked to a course
      tags:
        - Course
      responses: {}
      operationId: get-course-issues
      description: Returns all issues linked to a certain course.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: string
                user_id:
                  type: integer
              required:
                - course_id
                - user_id
      parameters:
        - schema:
            type: string
          in: query
          name: access_token
          required: true
  /course/modify:
    post:
      summary: ''
      operationId: post-course-modify
      responses:
        '200':
          description: OK
  /issue/create:
    post:
      summary: ''
      operationId: post-issue-create
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: access_token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                title:
                  type: string
                body:
                  type: string
              required:
                - user_id
                - title
                - body
        description: ''
      tags:
        - Issue
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        uva_id:
          type: integer
  securitySchemes: {}
